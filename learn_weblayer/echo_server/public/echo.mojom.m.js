// qlabs/learn_weblayer/echo/echo.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import { mojo } from './bindings.js';




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class EchoPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
      this.handle, 'echo.mojom.Echo', scope);
  }
}

/** @interface */
export class EchoInterface {

  /**
   * @param { !string } request
   * @return {!Promise<{
        result: !string,
   *  }>}
   */

  execute(request) { }
}

/**
 * @implements { EchoInterface }
 */
export class EchoRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!EchoPendingReceiver>}
     */
    this.proxy =
      new mojo.internal.interfaceSupport.InterfaceRemoteBase(
        EchoPendingReceiver,
        handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!EchoPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }


  /**
   * @param { !string } request
   * @return {!Promise<{
        result: !string,
   *  }>}
   */

  execute(
    request) {
    return this.proxy.sendMessage(
      531230075,
      Echo_Execute_ParamsSpec.$,
      Echo_Execute_ResponseParamsSpec.$,
      [
        request
      ]);
  }
}

/**
 * An object which receives request messages for the Echo
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class EchoReceiver {
  /**
   * @param {!EchoInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!EchoRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      EchoRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!EchoRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
      531230075,
      Echo_Execute_ParamsSpec.$,
      Echo_Execute_ResponseParamsSpec.$,
      impl.execute.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class Echo {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "echo.mojom.Echo";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!EchoRemote}
   */
  static getRemote() {
    let remote = new EchoRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the Echo
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class EchoCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      EchoRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!EchoRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.execute =
      new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
        this.router_);

    this.helper_internal_.registerHandler(
      531230075,
      Echo_Execute_ParamsSpec.$,
      Echo_Execute_ResponseParamsSpec.$,
      this.execute.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Echo_Execute_ParamsSpec =
  { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Echo_Execute_ResponseParamsSpec =
  { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
  Echo_Execute_ParamsSpec.$,
  'Echo_Execute_Params',
  [
    mojo.internal.StructField(
      'request', 0,
      0,
      mojo.internal.String,
      null,
      false /* nullable */,
      0),
  ],
  [[0, 16],]);



/**
 * @record
 */
export class Echo_Execute_Params {
  constructor() {
    /** @type { !string } */
    this.request;
  }
}



mojo.internal.Struct(
  Echo_Execute_ResponseParamsSpec.$,
  'Echo_Execute_ResponseParams',
  [
    mojo.internal.StructField(
      'result', 0,
      0,
      mojo.internal.String,
      null,
      false /* nullable */,
      0),
  ],
  [[0, 16],]);



/**
 * @record
 */
export class Echo_Execute_ResponseParams {
  constructor() {
    /** @type { !string } */
    this.result;
  }
}
